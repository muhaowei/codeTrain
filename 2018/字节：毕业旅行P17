    import java.util.*;
    public class test {

        public static void main(String[] args){
            Scanner sc=new Scanner(System.in);
            int n=sc.nextInt();
            int[][] matrix=new int[n][n];
            for(int i=0;i<n;i++){
                for(int j=0;j<n;j++){
                    matrix[i][j]=sc.nextInt();
                }
            }
            int[][] dp=new int[(1<<(n-1))][n];
            for(int i=1;i<dp.length;i++){
                for(int j=1;j<n;j++){
                    dp[i][j]=100000;
                }
            }
            for(int i=1;i<n;i++){
                dp[1<<(i-1)][i]=matrix[0][i];  //在计算当中当做0号城市不存在，不要把0号城市加入计算，用二进制数字标记是否访问过某些城市。
            }
            for(int i=1;i<dp.length;i++){
                for(int j=1;j<n;j++){
                    if((1<<(j-1))>=i)break;
                    int cur=1;
                    while( (1<<(cur-1))<i  ){
                        if(((1<<(cur-1))&i)==0||cur==j){//每个城市只经过一次，这里是判断集合里是否经过以前的城市，另外不能从自己跳到自己
                                                       //dp[i][j]代表访问过i中的城市，最后一次访问是j  cur代表最后一次是从cur跳到j的。
                            cur++;
                            continue;
                        }
                        dp[i][j]=Math.min(dp[i][j],dp[i-(1<<(j-1))][cur]+matrix[j][cur]);
                        cur++;
                    }
                }
            }
            int res=Integer.MAX_VALUE;
            for(int i=1;i<n;i++){
                res=Math.min(res,dp[dp.length-1][i]+matrix[i][0]);
            }
            System.out.println(res);

        }
    }
